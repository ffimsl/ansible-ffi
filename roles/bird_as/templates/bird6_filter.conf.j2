# Filter

filter own_subnet_morespec {
	if net ~ [{{ as_prefix.v6 }}+] then accept;
	reject;
}

filter own_subnet {
	if source = RTS_STATIC then {
		if net = {{ as_v6.as_prefix_host_spec }} then accept;
		if net = {{ as_prefix.v6 }} then accept;
        }
	reject;
}

define BOGON_PREFIXES = [ ::/8+,                         # RFC 4291 IPv4-compatible, loopback, et al
                          0100::/64+,                    # RFC 6666 Discard-Only
                          2001:2::/48+,                  # RFC 5180 BMWG
                          2001:10::/28+,                 # RFC 4843 ORCHID
                          2001:db8::/32+,                # RFC 3849 documentation
                          2002::/16+,                    # RFC 7526 6to4 anycast relay
                          3ffe::/16+,                    # RFC 3701 old 6bone
                          fc00::/7+,                     # RFC 4193 unique local unicast
                          fe80::/10+,                    # RFC 4291 link local unicast
                          fec0::/10+,                    # RFC 3879 old site local unicast
                          ff00::/8+                      # RFC 4291 multicast
 ];

define BOGON_ASNS = [
  0,                      # RFC 7607
  23456,                  # RFC 4893 AS_TRANS
  64496..64511,           # RFC 5398 and documentation/example ASNs
  64512..65534,           # RFC 6996 Private ASNs
  65535,                  # RFC 7300 Last 16 bit ASN
  65536..65551,           # RFC 5398 and documentation/example ASNs
  65552..131071,          # RFC IANA reserved ASNs
  4200000000..4294967294, # RFC 6996 Private ASNs
  4294967295 ];           # RFC 7300 Last 32 bit ASN

define TRANSIT_ASNS = [ 174,                  # Cogent
                        701,                  # UUNET
                        1299,                 # Telia
                        2914,                 # NTT Ltd.
                        3257,                 # GTT Backbone
                        3320,                 # Deutsche Telekom AG (DTAG)
                        3356,                 # Level3
                        3491,                 # PCCW
                        4134,                 # Chinanet
                        5511,                 # Orange opentransit
                        6453,                 # Tata Communications
                        6461,                 # Zayo Bandwidth
                        6762,                 # Seabone / Telecom Italia
                        6830,                 # Liberty Global
                        7018 ];               # AT&T

function reject_transit_paths()
int set transit_asns;
{
        transit_asns = TRANSIT_ASNS;
        if (bgp_path ~ transit_asns) then {
                print "Reject: Transit ASNs found on IXP: ", net, " ", bgp_path;
                reject;
        }
}

function reject_default_route()
{
  if net ~ [::/0] then reject;
}

function reject_bogon_asns()
int set bogon_asns;
{
  bogon_asns = BOGON_ASNS;

  if ( bgp_path ~ bogon_asns ) then {
    print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
    reject;
  }
}

function reject_bogon_prefixes()
prefix set bogon_prefixes;
{
  bogon_prefixes = BOGON_PREFIXES;

  if (net ~ bogon_prefixes) then {
    print "Reject: Bogon prefix: ", net, " ", bgp_path;
    reject;
  }
}

function honor_graceful_shutdown() {
  if (65535, 0) ~ bgp_community then {
    bgp_local_pref = 0;
  }
}

filter transit_in {
  reject_bogon_asns();
  reject_bogon_prefixes();
  reject_default_route();
  honor_graceful_shutdown();
  accept;
}

filter ixp_in {
  reject_bogon_asns();
  reject_bogon_prefixes();
#  reject_transit_paths();
  reject_default_route();
  honor_graceful_shutdown();
  accept;
}

filter cix_ixp_in {
  reject_bogon_asns();
  reject_bogon_prefixes();
  reject_default_route();
  honor_graceful_shutdown();
  accept;
}

filter downstream_in {
  reject_bogon_asns();
  reject_bogon_prefixes();
#  reject_transit_paths();
  reject_default_route();
  honor_graceful_shutdown();
  accept;
}

filter downstream_out {
  reject_bogon_asns();
  reject_bogon_prefixes();
#  reject_transit_paths();
  reject_default_route();
  honor_graceful_shutdown();
  accept;
}

filter internal_in {
  reject_bogon_prefixes();
  reject_default_route();
  accept;
}

filter internal_out {
  reject_bogon_prefixes();
  reject_default_route();
  accept;
}
